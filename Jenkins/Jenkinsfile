node {

    agent any

    try {

        stages {

            stage('Checkout') {
                steps {
                    checkout scm
                    sh 'git submodule update --init'
                }
            }

            stage('Build') {
                steps {
                    sh "./gradlew clean assembleDebug assembleAndroidTest -PBUILD_NUMBER=${env.BUILD_NUMBER}"
                }
            }

            /*
            stage('Smoke Test') {
                steps {
                    sh '''
                        #!/bin/bash
                        GIT_NAME=$(git --no-pager show -s --format='%an' $GIT_COMMIT)
                        GIT_EMAIL=$(git --no-pager show -s --format='%ae' $GIT_COMMIT)
                        echo "CONTRIBUTOR: $GIT_NAME $GIT_EMAIL ($GIT_COMMIT)"
                        cd ${WORKSPACE}
                        curl -s https://raw.githubusercontent.com/paulsbruce/AndroidDemoApp/master/Jenkins/runSmallTests.sh > ./Perfecto_API.sh
                        chmod u+x ./Perfecto_API.sh
                        bash Perfecto_API.sh "${WORKSPACE}" "app-debug" "com.example.perfecto.tipcalculator.test" "${PERFECTO_CLOUD}" "${PERFECTO_USERNAME}" "${PERFECTO_PASSWORD}" "/" "2" "$GIT_EMAIL" "${PERFECTO_REPORTING_KEY}"
                        exit $?
                    '''
                }
            }
            */

            stage('Archive Artifacts') {
                steps {
                    archiveArtifacts artifacts: 'app/build/outputs/apk/*.apk', fingerprint: true
                }
            }

            stage('Notify Results') {
                switch(
                //slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
        }

    } catch (e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}


// TODO: paste from https://jenkins.io/blog/2016/07/18/pipline-notifications/
def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus = buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}